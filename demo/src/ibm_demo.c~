
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include "iotfclient.h"
#include "logging.h"

volatile int interrupt = 0;
static char *configFilePath = "./demo/cfg/device.cfg";
static char *deviceID = "1234567890";
static char *orgID = "quickstart";
static char *deviceType = "";
static char *authMethod = "token";
static char *authToken = "";

// Handle signal interrupt
void sigHandler(int signo) {
	printf("SigINT received.\n");
	interrupt = 1;
}

/*******************************************************************************
*	parseInputArgsForConnectParams
*
********************************************************************************/
void parseInputArgsForConnectParams(int argc, char** argv) {
	int opt;

	while (-1 != (opt = getopt(argc, argv, "c:d:o:t:m:k:"))) {
		switch (opt) {
		case 'c':
			configFilePath = (char*) optarg;
			DEBUG("DeviceConfig file: %s\n", (char*) optarg);
			break;
		case 'd':
			deviceID = (char*) optarg;
			break;
		case 'o':
			orgID = (char*) optarg;
			break;
		case 't':
			deviceType = (char*) optarg;
			break;
		case 'm':
			authMethod = (char*) optarg;
			break;
		case 'k':
			authToken = (char*) optarg;
			break;
		case '?':
			if (optopt == 'c') {
				ERROR("Option -%c requires an argument.\n", optopt);
			}
			else if (isprint(optopt)) {
				WARN("Unknown option `-%c'.\n", optopt);
			}
			else {
				WARN("Unknown option character `\\x%x'.\n", optopt);
			}
			break;
		default:
			ERROR("Error in command line argument parsing\n");
			break;
		}
	}

}


void myCallback (char* commandName, char* format, void* payload)
{
	printf("------------------------------------\n" );
	printf("The command received :: %s\n", commandName);
	printf("format : %s\n", format);
	printf("Payload is : %s\n", (char *)payload);

	printf("------------------------------------\n" );
}

int main(int argc, char *argv[])
{
	int rc = -1;

	//
	//Parse Input-parameters
	//
	parseInputArgsForConnectParams(argc, argv);

	Iotfclient client;

	//catch interrupt signal
	signal(SIGINT, sigHandler);
	signal(SIGTERM, sigHandler);

	struct stat reqFileStat;
        if (stat(configFilePath, &reqFileStat) == 0 )
	{
		printf("Configuring client via ConfigFile: %s\n", configFilePath);
		rc = initialize_configfile(&client, configFilePath);
		if(rc != SUCCESS){
			printf("initialize failed and returned rc = %d.\n Quitting..", rc);
			return -1;
		}
	}
	else
	{
		printf("Configuring client via cmdline:\n");
		rc = initialize( &client, 
				 orgID, 
				 deviceType, 	
				 deviceID, 
				 authMethod, 
				 authToken);
		if(rc != SUCCESS){
			printf("initialize failed and returned rc = %d.\n Quitting..", rc);
			return -1;
		}	
	}

	

	rc = connectiotf(&client);
	if(rc != SUCCESS){
		printf("Connection failed and returned rc = %d.\n Quitting..", rc);
		return 0;
	}

	setCommandHandler(&client, myCallback);

	while(!interrupt) 
	{
		printf("Publishing the event stat with rc ");
		rc= publishEvent(&client, "status","json", "{\"d\" : {\"temp\" : 34 }}", QOS0);
		printf(" %d\n", rc);
		yield(&client, 1000);
		sleep(2);
	}

	printf("Quitting!!\n");

	disconnect(&client);

	return 0;
}
